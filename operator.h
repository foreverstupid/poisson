#ifndef HPC_POISSON_OPERATOR_MODULE_H
#define HPC_POISSON_OPERATOR_MODULE_H

#include "definitions.h"
#include "matrix.h"

/*
 * Contains information about the boundary conditions of the opeator.
 */
typedef struct Boundary
{
    /*
     * Boundary condition type.
     */
    BoundaryType type;

    /*
     * Boundary function samples. Note that this array length should
     * be consistent with the operator size along the respective axis.
     */
    scalar_t *phi;
} Boundary;



/*
 * Contains all information that defines the operator generated by the
 * equation.
 */
typedef struct Operator
{
    /* known functions from the equation */

    Matrix *A;   /* A[i, j] = k(x_i - 0.5*h_1, y_j) */
    Matrix *B;   /* B[i, j] = k(x_i, y_j - 0.5*h_2) */
    Matrix *Q;   
    Matrix *F;

    /* boundary condition types */

    Boundary left;
    Boundary right;
    Boundary bottom;
    Boundary top;

    /* grid steps */

    scalar_t h1;
    scalar_t h2;
} Operator;



/*
 * Represents the operator action over the given matrix: v = Au.
 * Note: u and v should have the same size.
 * Note: boundary conditions of the first order won't be applied.
 */
void apply(Matrix *v, const Operator *op, const Matrix *u);

/*
 * Creates an operator, generated by the equation.
 */
Operator *new_operator(
    const Problem *problem,
    const NumericalConfig *config);

/*
 * Disposes all resources, taking by the operator.
 */
void delete_operator(Operator *op);

#endif