#ifndef HPC_POISSON_OPERATOR_MODULE_H
#define HPC_POISSON_OPERATOR_MODULE_H

#include "definitions.h"
#include "matrix.h"

/*
 * Contains all information that defines the operator generated by the
 * equation.
 */
typedef struct Operator
{

    /*
     * Samples of k(x, y) shifted along X-axis by a half of a grid
     * step: A[i, j] = k(x_i - 0.5*h_1, y_j)
     */
    Matrix *A;

    /*
     * Samples of k(x, y) shifted along Y-axis by a half of a grid
     * step: B[i, j] = k(x_i, y_j - 0.5*h_2)
     */
    Matrix *B;

    /*
     * Potential function samples.
     */
    Matrix *Q;

    /*
     * The right part combined with the boundary functions.
     */
    Matrix *F;

    /* boundary condition types */

    BoundaryType left;
    BoundaryType right;
    BoundaryType bottom;
    BoundaryType top;

    /* grid steps */

    scalar_t h1;
    scalar_t h2;
} Operator;



/*
 * Represents the operator action over the given matrix: v = Au.
 * Note: u and v should have the same size.
 * Note: boundary conditions of the first order won't be applied.
 */
void apply(Matrix *v, const Operator *op, const Matrix *u);

/*
 * Represents applying the boundary conditions of the first order
 */
void apply_first_order_boundary(Matrix *v, const Operator *op);

/*
 * Creates an operator, generated by the equation.
 */
Operator *new_operator(
    const Problem *problem,
    const NumericalConfig *config);

/*
 * Disposes all resources, taking by the operator.
 */
void delete_operator(Operator *op);

#endif